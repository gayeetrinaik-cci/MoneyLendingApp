// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20231012174820_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Infrastructure.Entities.Bankaccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AccountNumber"), "utf8mb3");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BankName"), "utf8mb3");

                    b.Property<long?>("LoanId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LoanId" }, "FK_BankAccount_LoanId");

                    b.ToTable("bankaccount", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8mb3");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8mb3");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RegistrationNumber"), "utf8mb3");

                    b.Property<sbyte?>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ApprovedBy" }, "FK_Company_ApproveBy");

                    b.HasIndex(new[] { "StatusId" }, "FK_Company_StatusId");

                    b.HasIndex(new[] { "Name" }, "UQ_Company_Name")
                        .IsUnique();

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Companystatus", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("companystatus", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Loan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("AppovedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GrantedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("GrantedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LoanReason")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LoanReason"), "utf8mb3");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<sbyte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CompanyId" }, "fk_Loan_CompanyId");

                    b.HasIndex(new[] { "ProductId" }, "fk_Loan_ProductId");

                    b.HasIndex(new[] { "StatusId" }, "fk_Loan_StatusId");

                    b.ToTable("loan", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Loanconfirmationtoken", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(16)
                        .HasColumnType("char(16)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("LoanId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LoanId" }, "fk_LoanConfirmationToken_LoanId");

                    b.ToTable("loanconfirmationtoken", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Loanstatus", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StatusId" }, "UQ_LoanStatus_StatusId")
                        .IsUnique();

                    b.ToTable("loanstatus", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CummulativePaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("PaymentScheduleId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RemainingPayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaymentScheduleId" }, "FK_Payment_PaymentScheduleId");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Paymentschedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("CummulativeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Emi")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("EMI");

                    b.Property<long>("LoanId")
                        .HasColumnType("bigint");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("RemainingPayable")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LoanId" }, "FK_PaymentSchedule_LoanId");

                    b.ToTable("paymentschedule", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Penalty", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaymentId" }, "FK_Penalty_PaymentId");

                    b.ToTable("penalty", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<ulong>("IsPenaltyFixed")
                        .HasColumnType("bit(1)");

                    b.Property<int>("PaymentGap")
                        .HasColumnType("int");

                    b.Property<decimal>("Penalty")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProductType"), "utf8mb3");

                    b.Property<decimal>("RateOfInterest")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8mb3");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FirstName"), "utf8mb3");

                    b.Property<ulong>("IsActive")
                        .HasColumnType("bit(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastName"), "utf8mb3");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Userrole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "FK_UserRole_RoleId");

                    b.ToTable("userrole", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.Bankaccount", b =>
                {
                    b.HasOne("Infrastructure.Entities.Loan", "Loan")
                        .WithMany("Bankaccounts")
                        .HasForeignKey("LoanId")
                        .HasConstraintName("FK_BankAccount_LoanId");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Infrastructure.Entities.Company", b =>
                {
                    b.HasOne("Infrastructure.Entities.User", "ApprovedByNavigation")
                        .WithMany("Companies")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK_Company_ApproveBy");

                    b.HasOne("Infrastructure.Entities.Companystatus", "Status")
                        .WithMany("Companies")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Company_StatusId");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.Loan", b =>
                {
                    b.HasOne("Infrastructure.Entities.Company", "Company")
                        .WithMany("Loans")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Loan_CompanyId");

                    b.HasOne("Infrastructure.Entities.Product", "Product")
                        .WithMany("Loans")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Loan_ProductId");

                    b.HasOne("Infrastructure.Entities.Loanstatus", "Status")
                        .WithMany("Loans")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Loan_StatusId");

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.Loanconfirmationtoken", b =>
                {
                    b.HasOne("Infrastructure.Entities.Loan", "Loan")
                        .WithMany("Loanconfirmationtokens")
                        .HasForeignKey("LoanId")
                        .HasConstraintName("fk_LoanConfirmationToken_LoanId");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Infrastructure.Entities.Payment", b =>
                {
                    b.HasOne("Infrastructure.Entities.Paymentschedule", "PaymentSchedule")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentScheduleId")
                        .HasConstraintName("FK_Payment_PaymentScheduleId");

                    b.Navigation("PaymentSchedule");
                });

            modelBuilder.Entity("Infrastructure.Entities.Paymentschedule", b =>
                {
                    b.HasOne("Infrastructure.Entities.Loan", "Loan")
                        .WithMany("Paymentschedules")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PaymentSchedule_LoanId");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Infrastructure.Entities.Penalty", b =>
                {
                    b.HasOne("Infrastructure.Entities.Payment", "Payment")
                        .WithMany("Penalties")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Penalty_PaymentId");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Userrole", b =>
                {
                    b.HasOne("Infrastructure.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_RoleId");

                    b.HasOne("Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_UserId");
                });

            modelBuilder.Entity("Infrastructure.Entities.Company", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Infrastructure.Entities.Companystatus", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Infrastructure.Entities.Loan", b =>
                {
                    b.Navigation("Bankaccounts");

                    b.Navigation("Loanconfirmationtokens");

                    b.Navigation("Paymentschedules");
                });

            modelBuilder.Entity("Infrastructure.Entities.Loanstatus", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Infrastructure.Entities.Payment", b =>
                {
                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("Infrastructure.Entities.Paymentschedule", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Infrastructure.Entities.Product", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
